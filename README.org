* Application [[http://localhost:7000/][kardia]]
web application based on [[www.djangoproject.org][django]] to manage patients of the cardiology clinic of [[https://
www.cliniquekardia.com]] , Algiers

The idae is to combine the simplicity and conciseness of *python/django* and the beauty and modernity of *ConTeXT*

In my previous app (for Benzerdjeb Hospital) i had LaTeX as reporting tool and it worked quiet well,
 but there is a significant difference with LaTeX and ConTeXT which make the switch tricky:

1- LaTeX reads the source file *once*, well actually twice with an iteration loop, while ConTeXT runs the source file as many times as 9!
2- ConTeXT needs the PDF to be written (read "saved") in the filesystem to be processed before the final result,.
This make it difficult to work with =tempfiles= and  =PIPE=.

I somehow managed to render the PDF but the later is generated /in the root/ of my app, thus:
    + it cannot be rendered directly in the web browser,
    + and we cannot access the file directly from a remote computer or tablet.
      
#+BEGIN_SRC python

def consultation_pdf(request, slug, pk):
    entry = Consultation.objects.get(pk=pk)
    source = Patient.objects.get(slug=slug)
#    context = Context({ 'consultation': entry, 'patient': source })
    context = dict({'consultation': entry, 'patient': source})
    template = get_template('clinic/consultation.tex')
    rendered_tpl = template.render(context, request).encode('utf-8')
    # save the file to disk
    filename = f'{entry.patient}_consultation{entry.consultation_date}'
    # Python3 only. For python2 check out the docs!
    with tempfile.TemporaryDirectory() as tempdir:
        filename = os.path.join(tempdir, str(filename))
        with open(filename, 'wb') as infile:
            infile.write(rendered_tpl)
###########################################################
# from django.core.files import File
#      with open('/tmp/hello.world', 'w') as f:
#...     myfile = File(f)
#...     myfile.write('Hello World')
#####################################################
        process = Popen(
                ['context', filename, tempdir],
                stdin=PIPE,
                stdout=PIPE,)
        process.communicate(rendered_tpl)
        with open(os.path.join(tempdir, f'{filename}.pdf'), 'rb') as f:
            pdf = f.read()
            r = HttpResponse(content_type='application/pdf')
            r.write(pdf)
            return r


#+END_SRC

the =with= assertion is in my opinion the root of my problem.
* components 
the site is divided into components:

** clinic   
demographics, rendez-vous, 
*** DONE Patient
*** DONE Reception
*** DONE Stress    
*** DONE Wilaya
*** DONE Motif
*** DONE Tag

** stock  
drugs, stents and related stuff
** cathlab 
interventions, scheduling
*** DONE Lesions
*** DONE Indication
*** DONE Complication
*** DONE Sondes
*** DONE Guidewire
*** DONE Balloon
*** DONE Stent
*** DONE Pace
*** DONE Coroscan
*** DONE Coronarographie
*** DONE Stimulation

**  Billing 
patients and third party (CNAS, CASNOS)..
*** DONE Quotations
*** DONE Convention
*** DONE Prestation    
    le problème de *dépendance circulaire* ayant été reglé entre patient-prestation-reception en éliminant l'import de =Patient= dans le model Reception
** DONE correspondence 
stomatology, pre operative reports
** biology 
lab sample's results
             
* dependencies
- python >= 3.6 because *F-strings* rock !! 
- django 2.0.x yeah the url path are cool.
- django-crispy-forms
- Bootstrap V4.0 , +considering to switch to 4.0+
- postgresql + psycopg2 (sqlite for development)
- [[www.contextgarden.org][ConTeXT]] MARK IV for PDF creation

* custom actions
** automatic PDF reporting 

via special =views=
managed to export a pdf, but i have 2 issues so far:
  + django throws an error message: file not found
  + pdf is actually written inhe current directory,
  + the solution is to write directly the generated pdf into the *medias* directory,
 then to delete the compilation files: =*.tuc= and logfiles. 
 
** export to CSV  

via =admin= actions: so far only non callable fields are exported,
have to figure out how to do for M2M fields and FK.

** DONE Search field 
** Custom (list) views and dashboards:
    + per day, week or month
    + for inhospîtal patients
    + for payments and billing
   

    
* ConTeXT related
** DONE image directory
By default, ConTeXt searches an image in the current directory,
 the parent directory, and the grand-parent directory.
To search for images in other directories, for example
 a =./images= subdirectory and =/home/user/images=, use:

#+BEGIN_SRC latex
\setupexternalfigures[location=global]
\setupexternalfigures[directory={images, /home/user/images}]
#+END_SRC

** TODO using pathlib in views
[[pathlib.readthedocs.io][pathlib]] is a very useful addition to  *python >=3.4* ,
 it comes with useful tools such as the `/` operator

* Fiche technique
nom - prénom - date et lieu de naissance
age - medecin traitant
poids - taille - sc

Diagnostic exact:


Pathologies associées

Antécedets de chirurgie cardiaque ou de geste interventionnel:

FDR:

Stade fonctionnel NYHA

Telethorax (ict)

ECG

echocoeur (conclusion)
FEVG PAPS Taile et vacuité de l'OG
Fonction VD
Atteinte valvulaire (grade)
Etat de l'aorte

Test d'ischémie

Résultat du test d'ischémie

Etat des coronaires (coronarographie)


Syntax score:

Etat des coronaires (coroscanner)

Etat des artères périph au doppler ou à l'angio:

Fonction reale (clearance)

Fonction respiratoire (EFR):

Etat dentaire

Biologie principales anomalies:

Allergies:

Traitement médical:

evaluation du risque opératoire:

signature (medecin traitant de la clinique)
